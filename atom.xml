<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>forestjiang&#39;blog</title>
  
  <subtitle>欢迎来到</subtitle>
  <link href="http://jlh630.github.io/atom.xml" rel="self"/>
  
  <link href="http://jlh630.github.io/"/>
  <updated>2023-11-21T05:36:51.202Z</updated>
  <id>http://jlh630.github.io/</id>
  
  <author>
    <name>forestjiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ebpf初学者问题：使用bpf_trace_printk()报错</title>
    <link href="http://jlh630.github.io/2023/11/20/first/"/>
    <id>http://jlh630.github.io/2023/11/20/first/</id>
    <published>2023-11-20T08:20:08.000Z</published>
    <updated>2023-11-21T05:36:51.202Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎大家阅读我的第一篇博客，如果在文章中有任何不准确或需要改进的地方，多多海涵。这是我学习的过程中的一次尝试，也希望通过这个平台与大家交流，共同进步。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在看ebpf和xdp，于是编写了我的第一个xdp程序，我的内核版本为5.18.17,具体对bpf_trace_printk()函数的具体在正文。</p><h3 id="第一个xdp程序"><a href="#第一个xdp程序" class="headerlink" title="第一个xdp程序"></a>第一个xdp程序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/bpf.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEC(NAME) __attribute__((section(NAME), used))</span><br><br>SEC(<span class="hljs-string">&quot;xdp_test&quot;</span>)<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">xdp_drop_the_world</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> xdp_md *ctx)</span> &#123;<br>    <br><span class="hljs-keyword">return</span> XDP_DROP;<br>&#125;<br><br><span class="hljs-type">char</span> _license[] SEC(<span class="hljs-string">&quot;license&quot;</span>) = <span class="hljs-string">&quot;GPL&quot;</span>; <br><br></code></pre></td></tr></table></figure><h3 id="BPF程序编译："><a href="#BPF程序编译：" class="headerlink" title="BPF程序编译："></a>BPF程序编译：</h3><p>编译XDP程序，通过Clang等工具进行编译。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clang -O2 -target bpf -c xdp_example.c -o xdp_example.o<br></code></pre></td></tr></table></figure><p>-O2： 这是编译器的优化级别选项，级别有多个，从 -O0（无优化）到 -O3（高度优化）。</p><p>-target bpf： 这个选项指定了目标平台或体系结构，这里是 BPF。</p><h3 id="XDP加载："><a href="#XDP加载：" class="headerlink" title="XDP加载："></a>XDP加载：</h3><p>使用工具ip命令，将XDP程序加载到lo（本地回环）上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> dev lo xdp obj xdp_example.o sec xdp_test<br></code></pre></td></tr></table></figure><p>sec xdp_test 指定了要加载的eBPF程序中的特定section</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>试着ping一下lo，ping不通。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ping 127.0.0.1<br> PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.<br></code></pre></td></tr></table></figure><p>接着关闭后正常ping通。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> dev eth0 xdp off<br></code></pre></td></tr></table></figure><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="bpf-trace-printk-尝试"><a href="#bpf-trace-printk-尝试" class="headerlink" title="bpf_trace_printk()尝试"></a>bpf_trace_printk()尝试</h3><p>根据上面最简单的xdp小例子，我想打印点日志，于是我翻了翻linux&#x2F;bpf.h中是否有提供的函数。<br>确实有此函数，但是头文件中把他注释掉了，我截取了一段对这个函数的说明。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs linux/bpf.h">*long bpf_trace_printk(const char *fmt, u32 fmt_size, ...)<br>* Description<br>* This helper is a &quot;printk()-like&quot; facility for debugging. It<br>* prints a message defined by format *fmt* (of size *fmt_size*)<br>* to file *\/sys/kernel/debug/tracing/trace* from DebugFS, if<br>* available. It can take up to three additional **u64**<br>* arguments (as an eBPF helpers, the total number of arguments is<br>* limited to five).<br>*<br>* Each time the helper is called, it appends a line to the trace.<br>* Lines are discarded while *\/sys/kernel/debug/tracing/trace* is<br>* open, use *\/sys/kernel/debug/tracing/trace_pipe* to avoid this.<br>* The format of the trace is customizable, and the exact output<br>* one will get depends on the options set in<br>* *\/sys/kernel/debug/tracing/trace_options* (see also the<br>* *README* file under the same directory).<br></code></pre></td></tr></table></figure><p>大致意思:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> long bpf<span class="hljs-emphasis">_trace_</span>printk(const char <span class="hljs-emphasis">*fmt, u32 fmt_size, ...)</span><br><span class="hljs-emphasis">*</span> 说明<br><span class="hljs-bullet">*</span> 这个辅助函数类似于 &quot;printk()&quot;，用于调试目的。它根据格式 <span class="hljs-emphasis">*fmt*</span>（大小为 <span class="hljs-emphasis">*fmt_size*</span>）<br><span class="hljs-bullet">*</span> 将消息打印到位于 DebugFS 的文件 <span class="hljs-emphasis">*\/sys/kernel/debug/tracing/trace*</span> 中（如果可用）。<br><span class="hljs-bullet">*</span> 它可以接受最多三个额外的 <span class="hljs-strong">**u64**</span> 参数（作为 eBPF 辅助函数，总参数个数限制为五个）。<br><span class="hljs-bullet">*</span><br><span class="hljs-bullet">*</span> 每次调用该辅助函数时，它会将一行追加到跟踪中。当 <span class="hljs-emphasis">*\/sys/kernel/debug/tracing/trace*</span> 打开时，<br><span class="hljs-bullet">*</span> 行将被丢弃，可以使用 <span class="hljs-emphasis">*\/sys/kernel/debug/tracing/trace_pipe*</span> 避免这种情况。<br><span class="hljs-bullet">*</span> 跟踪的格式是可定制的，实际输出取决于在 <span class="hljs-emphasis">*\/sys/kernel/debug/tracing/trace_options*</span> 中设置的选项<br><span class="hljs-bullet">*</span> （也可以查看相同目录下的 <span class="hljs-emphasis">*README*</span> 文件。<br></code></pre></td></tr></table></figure><p>由于函数声明给注释掉了，所以复制一下他的声明进行使用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/bpf.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEC(NAME) __attribute__((section(NAME), used))</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MSG <span class="hljs-string">&quot;Hello from eBPF filter! Packet received\n&quot;</span></span><br><br><span class="hljs-type">long</span> <span class="hljs-title function_">bpf_trace_printk</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *fmt, <span class="hljs-type">long</span> <span class="hljs-type">long</span> fmt_size, ...)</span>;<br><span class="hljs-comment">//因为u32是linux封装的类型我懒得引包，用long long代替</span><br><br>SEC(<span class="hljs-string">&quot;xdp_test&quot;</span>)<br><span class="hljs-type">int</span> <span class="hljs-title function_">xdp_drop_the_world</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> xdp_md *ctx)</span> &#123;<br>bpf_trace_printk(MSG,<span class="hljs-keyword">sizeof</span>(MSG));<br>    <span class="hljs-keyword">return</span> XDP_DROP;<br>&#125;<br><br><span class="hljs-type">char</span> _license[] SEC(<span class="hljs-string">&quot;license&quot;</span>) = <span class="hljs-string">&quot;GPL&quot;</span>; <br></code></pre></td></tr></table></figure><h3 id="加载错误"><a href="#加载错误" class="headerlink" title="加载错误"></a>加载错误</h3><p>程序编译正常，但是在加载中出现了问题如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs error">Verifier analysis:<br><br>last insn is not an exit or jmp<br>processed 0 insns (limit 1000000) max_states_per_insn 0 total_states 0 peak_states 0 mark_read 0<br><br>Error fetching program/map!<br></code></pre></td></tr></table></figure><p>这个错误暂时不解决。</p><h3 id="libbpf"><a href="#libbpf" class="headerlink" title="libbpf"></a>libbpf</h3><p>libbpf 是一个用于操作 BPF的 C 语言库。它提供了一组功能，允许开发人员在用户空间中加载和操作 BPF 程序，与 BPF 内核子系统进行通信，以及操作 BPF 映射（maps）等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install libbpf-dev<br></code></pre></td></tr></table></figure><h3 id="使用bpf-printk"><a href="#使用bpf-printk" class="headerlink" title="使用bpf_printk()"></a>使用bpf_printk()</h3><p>libbpf这个库给我们提供了bpf&#x2F;bpf_helpers.h头文件，bpf&#x2F;bpf_helpers.h提供了在 BPF 程序中使用的一组辅助函数。这些辅助函数用于执行一些常见的操作。探索这个头文件发现这个打印的宏函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bpf_helpers.h">/* Helper macro to print out debug messages */<br>#define bpf_printk(fmt, ...)\<br>(&#123;\<br>char ____fmt[] = fmt;\<br>bpf_trace_printk(____fmt, sizeof(____fmt),\<br> ##__VA_ARGS__);\<br>&#125;)<br><br>/*<br> * Helper macro to place programs, maps, license in<br> * different sections in elf_bpf file. Section names<br> * are interpreted by elf_bpf loader<br> */<br></code></pre></td></tr></table></figure><p>我们先使用一下，再分析这个头文件封装的这个宏函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/bpf.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bpf/bpf_helpers.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MSG <span class="hljs-string">&quot;Hello from eBPF filter! Packet received\n&quot;</span></span><br><br>SEC(<span class="hljs-string">&quot;xdp_test&quot;</span>)<br><span class="hljs-type">int</span> <span class="hljs-title function_">xdp_drop_the_world</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> xdp_md *ctx)</span> &#123;<br>    bpf_printk(MSG);<br>    <span class="hljs-keyword">return</span> XDP_DROP;<br>&#125;<br><br><span class="hljs-type">char</span> _license[] SEC(<span class="hljs-string">&quot;license&quot;</span>) = <span class="hljs-string">&quot;GPL&quot;</span>; <br></code></pre></td></tr></table></figure><p>编译没问题，XDP加载没问题，到&#x2F;sys&#x2F;kernel&#x2F;debug&#x2F;tracing&#x2F;trace_pipe中查看打印出的日志信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cat</span> /sys/kernel/debug/tracing/trace_pipe<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs resault">&lt;idle&gt;-0       [000] d.s31 24494.666981: bpf_trace_printk: Hello from eBPF filter! Packet received<br><br>&lt;idle&gt;-0       [000] dNs31 24494.667010: bpf_trace_printk: Hello from eBPF filter! Packet received<br><br>&lt;idle&gt;-0       [000] d.s31 24496.203102: bpf_trace_printk: Hello from eBPF filter! Packet received<br><br>&lt;idle&gt;-0       [000] dNs31 24496.203116: bpf_trace_printk: Hello from eBPF filter! Packet received<br><br>&lt;idle&gt;-0       [004] d.s31 24496.299080: bpf_trace_printk: Hello from eBPF filter! Packet received<br><br>&lt;idle&gt;-0       [012] d.s31 24496.463054: bpf_trace_printk: Hello from eBPF filter! Packet received<br><br>&lt;idle&gt;-0       [008] d.s31 24496.463058: bpf_trace_printk: Hello from eBPF filter! Packet received<br><br>&lt;idle&gt;-0       [008] d.s31 24496.463062: bpf_trace_printk: Hello from eBPF filter! Packet received<br></code></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>如果运行sudo cat &#x2F;sys&#x2F;kernel&#x2F;debug&#x2F;tracing&#x2F;trace_pipe 被阻塞住了，并且没有消息输出。有可能是内核跟踪状态没有开启。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cat</span> /sys/kernel/debug/tracing/tracing_on<br></code></pre></td></tr></table></figure><p>如果输出为 1，表示内核跟踪当前是开启状态。如果输出为 0，表示内核跟踪当前是关闭状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">echo</span> 1 &gt; /sys/kernel/debug/tracing/tracing_on<br></code></pre></td></tr></table></figure><h3 id="分析bpf-printk"><a href="#分析bpf-printk" class="headerlink" title="分析bpf_printk()"></a>分析bpf_printk()</h3><p>根据上面bpf_printk()的宏函数，可以看出，这个函数仅仅只是把bpf_trace_printk()进行了一次简单的封装，但是程序却能正常使用。继续查看这里头存在的猫腻。因为在bpf&#x2F;bpf_helpers.h头文件中引入了bpf_helper_defs.h这个头文件。最终在bpf_helper_defs.h发现了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bpf_helper_defs.h">static long (*bpf_trace_printk)(const char *fmt, __u32 fmt_size, ...) = (void *) 6;<br></code></pre></td></tr></table></figure><p>将函数指针初始化为内核中 bpf_trace_printk 函数的地址。在 BPF 程序中，使用数字 6 来表示 bpf_trace_printk。这是因为在 BPF 中，函数的地址可以通过数字来表示，而 6 恰好是 bpf_trace_printk 的地址。<br>所以，回过头到上面的错误例子中，模仿使用这种方式:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/bpf.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEC(NAME) __attribute__((section(NAME), used))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MSG <span class="hljs-string">&quot;Hello from eBPF filter! Packet received\n&quot;</span></span><br><span class="hljs-comment">//加入</span><br><span class="hljs-type">static</span> <span class="hljs-title function_">long</span> <span class="hljs-params">(*bpf_trace_printk)</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *fmt, __u32 fmt_size, ...)</span> = (<span class="hljs-type">void</span> *) <span class="hljs-number">6</span>;<br><br>SEC(<span class="hljs-string">&quot;xdp_test&quot;</span>)<br><span class="hljs-type">int</span> <span class="hljs-title function_">xdp_drop_the_world</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> xdp_md *ctx)</span> &#123;<br>    <span class="hljs-type">char</span> msg[<span class="hljs-number">50</span>]=MSG;<br>    bpf_trace_printk(msg,<span class="hljs-keyword">sizeof</span>(msg));<br>    <span class="hljs-keyword">return</span> XDP_DROP;<br>&#125;<br><br><span class="hljs-type">char</span> _license[] SEC(<span class="hljs-string">&quot;license&quot;</span>) = <span class="hljs-string">&quot;GPL&quot;</span>; <br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>libbpf是一个编写bpf非常实用的库，里面封装了许多宏函数。bpf_trace_printk()函数仅仅适用于调试。希望这篇博客为你解决了困惑，如果在本博客过程中遇到了问题或有更多的想法，欢迎留言分享！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;欢迎大家阅读我的第一篇博客，如果在文章中有任何不准确或需要改进的地方，多多海涵。这是我学习的过程中的一次尝试，也希望通过这个平台与大家交流，共同进步。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="kernel" scheme="http://jlh630.github.io/categories/kernel/"/>
    
    
    <category term="bpf" scheme="http://jlh630.github.io/tags/bpf/"/>
    
    <category term="xdp" scheme="http://jlh630.github.io/tags/xdp/"/>
    
  </entry>
  
</feed>
